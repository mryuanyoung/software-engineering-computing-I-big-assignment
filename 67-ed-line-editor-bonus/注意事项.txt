个人关于大作业一些隐性需求的解读和拓展，同时提一下必须得注意的地方（仅供参考）：

1、W表示追加模式，写入文本时不需要换行追加，比如：
文件：
1
追加内容：
a
b
预期结果：
1a
b

2、s指令存在s/内容//的情况(即替换内容为空)，如果使用split请使用split("/",-1)

3、无参数的s指令前如果没有带参数的s，直接输出'?'

4、对于a,i，如果地址小于0或者大于$（即非法地址），直接输出'?'，不进行指令操作

5、对于其他指令，如果地址小于等于0或者大于$（即非法地址），直接输出'?'，不进行指令操作

6、q,Q,f指令前不能出现地址（如$Q  ;f之类的），如果出现地址，直接输出'?'，不进行指令操作（部分测试用例出现）

7、地址的匹配部分存在内部出现歧义字符的情况，如：/2,.-3/-1,?6 ,?+2j，解析的时候应该认为是合法的

8、s指令如果是多行操作，如果其中一行满足替换条件则不需要输出'?'，换言之没有发生任何替换就输出'?'

9、no line found是很多种原因造成的，最常见的原因是用例使用了错误地址而解析时认为是正确的

10、代表双地址的,和;不能与'-n'和'+n'组合，如果出现这种情况直接输出'?'，不进行指令操作（部分测试用例出现）

11、'-n'和'+n'里面只能是数字，而m,n里的m和n可以是别的地址

12、存在一部分天马行空的地址组合方式，例如/?的非法匹配地址（如/ww?p）、元素完全错误的地址（如m,n+1c，很容易跟m指令混淆）、两个地址连在一起的混合地址（如;.d），解析的时候应该认为是不合法的（后来添加的部分测试用例出现）

13、对于撤销指令，推荐使用栈来备份每一次改动的文本、当前行和标记，不建议反向操作

14、标记和行最好使用列表绑在一起维护，便于管理和减轻工作量

15、c的替换模式如果输入内容为空，不能输出空行，而是相当于删除操作

16、（重要隐性需求）加标记、打印等操作不会影响撤销时的次数问题，但是会影响栈顶的备份状态
比如：执行某操作，再执行p指令，再撤销，当前文本是执行某操作后的文本，当前行是执行p指令后的行
又比如：执行某操作，再执行删除操作，再执行k指令，再撤销，文本恢复为某操作后的文本，而这个时候标记依然存在
如当前文本如下（当前行为第三行）：
a1
a2
a3
执行操作：
0a
nju
.
2d
2kx
u
操作完毕之后，标记x依然存在且依附于第三行的a2。
参考实现方法：在进行压栈操作时把当前的标记备份到栈顶，然后再压栈。

？？？

附加说明更正：

16、第一个举例应该是：
执行某操作，再执行p指令，再撤销，当前文本是执行某操作前的文本，当前行是执行p指令后的当前行的对应行

20、换行（"\r\n"）

再次对16更正……
第一个例子无视掉吧，为了凑合那几个玄学测试用例重新描述一下= =
当p的前面没有u或者p前面有u并且p与u之间存在文本改动，那么p会改变栈顶的当前行
同时提一下：
第一次u指令需要出栈两次，第一次出栈是为了把上一次改动给“踢”掉，第二次出栈是为了获取需要的历史信息
如果再次执行u指令，如果与上一次u指令之间没有文本改动，只需要出栈一次获取历史信息即可，否则同上出栈两次


17、关于【注意，撤销的是对编辑器缓存中文本的改动，写入文件后，之前的改动不可撤销。】的进一步理解：
这里的改动不可撤销是指不需要恢复写好的文件，已经保存的文件就不需要处理了，编辑器里还是可以进行撤销操作的

18、k指令存在非法使用的情况，如果参数部分非一个字符的小写字母，需要输出'?'且不执行操作（部分测试用例出现）

19、地址里的标签指令也存在非法的情况，比如'1p或者'A,'0p，解析的时候应该认为是不合法的（部分测试用例出现）

20、如果W和w命令前面的地址是单个地址，保存的时候需要在末尾添加换行（"/r/n"），如果是两个地址则不需要添加换行

21、相信玄学

（PS：1~13为基础指令部分，14~21为高级功能部分）
